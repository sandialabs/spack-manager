diff --git a/src/seq_mv/csr_spgemm_device_numer.h b/src/seq_mv/csr_spgemm_device_numer.h
index 26fa82a6b..13fcdc24d 100644
--- a/src/seq_mv/csr_spgemm_device_numer.h
+++ b/src/seq_mv/csr_spgemm_device_numer.h
@@ -38,7 +38,7 @@ hypre_spgemm_hash_insert_numer(
    HYPRE_Int j = 0;
    HYPRE_Int old = -1;
-#pragma unroll UNROLL_FACTOR
+#pragma unroll 8 //UNROLL_FACTOR
    for (HYPRE_Int i = 0; i < SHMEM_HASH_SIZE; i++)
    {
       /* compute the hash value of key */
diff --git a/src/seq_mv/csr_spgemm_device_rocsparse.c b/src/seq_mv/csr_spgemm_device_rocsparse.c
index 715b2b226..113ffdd5d 100644
--- a/src/seq_mv/csr_spgemm_device_rocsparse.c
+++ b/src/seq_mv/csr_spgemm_device_rocsparse.c
@@ -54,7 +54,7 @@ hypreDevice_CSRSpGemmRocsparse(HYPRE_Int           m,
    /* For rocSPARSE, the CSR SpGEMM implementation does not require the columns to be sorted! */
    /* RL: for matrices with long rows, it seemed that the sorting is still needed */
-#if 0
+#if 1
    hypre_SortCSRRocsparse(m, k, nnzA, descrA, d_ia, d_ja_sorted, d_a_sorted);
    hypre_SortCSRRocsparse(k, n, nnzB, descrB, d_ib, d_jb_sorted, d_b_sorted);
 #endif
diff --git a/src/seq_mv/csr_spgemm_device_symbl.h b/src/seq_mv/csr_spgemm_device_symbl.h
index 447066718..21d45149e 100644
--- a/src/seq_mv/csr_spgemm_device_symbl.h
+++ b/src/seq_mv/csr_spgemm_device_symbl.h
@@ -33,7 +33,7 @@ hypre_spgemm_hash_insert_symbl(
    HYPRE_Int j = 0;
    HYPRE_Int old = -1;
-#pragma unroll UNROLL_FACTOR
+#pragma unroll 8 //UNROLL_FACTOR
    for (HYPRE_Int i = 0; i < SHMEM_HASH_SIZE; i++)
    {
       /* compute the hash value of key */
