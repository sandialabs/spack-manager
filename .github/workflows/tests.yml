# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Spack-Manager Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    env:
      SPACK_MANAGER: ${{github.workspace}}
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.7, 3.8, 3.9]
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Run unit tests
      run: ./scripts/run_tests.sh
  style-checks:
    runs-on: ubuntu-latest
    env:
      SPACK_MANAGER: ${{github.workspace}}
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.7]
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Link scripts with flake8
      run: |
        # flake8 on scripts that aren't spack extensions
        flake8 .
    - name: Spack Style
      run: |
        # check our spack extension with spack's style guide
        source start.sh
        spack-start
        spack style spack-scripting
  concretization-basic:
    runs-on: ${{matrix.os}}
    env:
      SPACK_MANAGER: ${{github.workspace}}
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.7]
        os: [ubuntu-latest, macos-latest]
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Run concretization tests
      run: |
        source start.sh
        spack-start
        # test and make sure the solver is working for env using clingo
        spack solve exawind 1> /dev/null 
        tests/ci_config_concretization.py -y env-templates/exawind_basic.yaml
        tests/ci_config_concretization.py -y env-templates/exawind_matrix.yaml
  concretization-matrix:
    runs-on: ${{matrix.os}}
    env:
      SPACK_MANAGER: ${{github.workspace}}
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.7]
        os: [ubuntu-latest]
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Run concretization tests
      run: |
        source start.sh
        spack-start
        # test and make sure the solver is working for env using clingo
        spack solve exawind 1> /dev/null 
        tests/ci_config_concretization.py -y env-templates/exawind_matrix.yaml
  quick-commands:
    runs-on: ubuntu-latest
    env:
      SPACK_MANAGER: ${{github.workspace}}
    strategy:
      fail-fast: true
      matrix:
        python-version: [3.7]
        os: [ubuntu-latest]
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Test quick-commands
      run: |
        source start.sh
        quick-create --name quick-create --spec exawind
        spack env deactivate
        quick-create-dev --name quick-create-dev --spec amr-wind@main
        spack env deactivate
        quick-activate ${SPACK_MANAGER}/environments/quick-create-dev
        spack env deactivate
  snapshot-workflow:
    runs-on: ubuntu-latest
    env:
      SPACK_MANAGER: ${{github.workspace}}
      E4S_MACHINE: true
    strategy:
      fail-fast: true
      matrix:
        python-version: [3.7]
        os: [ubuntu-latest]
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Test snapshot command
      run: |
        source start.sh
        spack-start
        snapshot_creator.py --stop_after concretize --name test --modules --link_type soft --use_machine_name



        
    
